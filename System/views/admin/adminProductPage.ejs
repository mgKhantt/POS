<%- contentFor('style') %>
    <style>
        .product-page {
            padding: 30px;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 10px;
        }

        .page-header h2 {
            font-size: 1.8rem;
            font-weight: 600;
        }

        .add-btn {
            background-color: #0d6efd;
            color: white;
            padding: 10px 18px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            transition: 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .add-btn:hover {
            background-color: #0b5ed7;
        }

        .search-filter-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .search-bar input {
            width: 280px;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            outline: none;
            transition: border 0.2s;
        }

        .search-bar input:focus {
            border-color: #0d6efd;
        }

        .filter select {
            padding: 8px 12px;
            border-radius: 6px;
            border: 1px solid #ddd;
            outline: none;
            cursor: pointer;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            border-radius: 8px;
            overflow: hidden;
        }

        th,
        td {
            padding: 14px 16px;
            text-align: left;
            border-bottom: 1px solid #eee;
            vertical-align: middle;
            font-size: 0.95rem;
        }

        th {
            background-color: #f9fafb;
            font-weight: 600;
            color: #333;
        }

        tr:hover {
            background-color: #f5f7fa;
        }

        .product-image {
            width: 65px;
            height: 65px;
            object-fit: cover;
            border-radius: 6px;
            border: 1px solid #ddd;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
            justify-content: flex-start;
        }

        .edit-btn,
        .delete-btn {
            padding: 6px 12px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: 0.2s ease-in-out;
        }

        .edit-btn {
            background-color: #17a2b8;
            color: white;
        }

        .edit-btn:hover {
            background-color: #138496;
        }

        .delete-btn {
            background-color: #dc3545;
            color: white;
        }

        .delete-btn:hover {
            background-color: #b02a37;
        }

        .empty-state {
            text-align: center;
            padding: 50px 0;
            color: #888;
            font-size: 1rem;
        }

        .pagination {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        .pagination button {
            padding: 6px 12px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.2s;
        }

        .pagination button.active {
            background-color: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }

        .pagination button:hover {
            background-color: #e9ecef;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .action-buttons {
                flex-direction: column;
                /* Stack buttons vertically */
                gap: 6px;
            }

            th,
            td {
                font-size: 0.85rem;
                padding: 10px 12px;
            }

            .search-bar input,
            .filter select {
                max-width: 100%;
            }
        }

        @media (max-width: 480px) {
            .page-header h2 {
                font-size: 1.4rem;
            }

            .add-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>

    <%- contentFor('body') %>
        <div class="product-page">
            <div class="page-header">
                <h2><i class="fa-solid fa-boxes me-2"></i> Manage Products</h2>
                <button class="add-btn" onclick="location.href='/admin/products/create-product'">
                    <i class="fa-solid fa-plus"></i> Add Product
                </button>
            </div>

            <div class="search-filter-bar">
                <div class="search-bar">
                    <input type="text" id="searchInput" placeholder="Search by name, brand, or code..."
                        onkeyup="applyFilters()">
                </div>

                <div class="filter">
                    <select id="categoryFilter" onchange="applyFilters()">
                        <option value="all">All Categories</option>
                        <% const uniqueCategories=[...new Set(products.map(p=> p.category))];
                            uniqueCategories.forEach(category => {
                            %>
                            <option value="<%= category %>">
                                <%= category %>
                            </option>
                            <% }) %>
                    </select>
                </div>
            </div>

            <% if (products.length> 0) { %>
                <table id="productTable">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Product</th>
                            <th>Image</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Code</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="productTbody">
                        <% products.forEach((product, index)=> { %>
                            <tr data-category="<%= product.category %>">
                                <td>
                                    <%= index + 1 %>
                                </td>
                                <td>
                                    <%= product.name %>
                                </td>
                                <td>
                                    <img src="<%= product.imageUrl || '/uploads/no-image.png' %>"
                                        alt="<%= product.name %>" class="product-image">
                                </td>
                                <td>
                                    <%= product.category %>
                                </td>
                                <td>
                                    <%= product.brand %>
                                </td>
                                <td>$<%= product.price.toFixed(2) %>
                                </td>
                                <td>
                                    <%= product.stock %>
                                </td>
                                <td>
                                    <%= product.code %>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="edit-btn"
                                            onclick="location.href='/admin/products/edit/<%= product._id %>'">
                                            <i class="fa-solid fa-pen-to-square"></i> Edit
                                        </button>
                                        <button class="delete-btn" onclick="deleteProduct('<%= product._id %>', '<%= product.name %>')">
                                            <i class="fa-solid fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            <% }) %>
                    </tbody>
                </table>

                <div class="pagination" id="pagination"></div>
                <% } else { %>
                    <div class="empty-state">
                        <i class="fa-solid fa-box-open fa-2x mb-3"></i>
                        <p>No products available. Click “Add Product” to create one.</p>
                    </div>
                    <% } %>
        </div>

        <script>
            const rowsPerPage = 10;
            let currentPage = 1;

            function applyFilters() {
                const searchInput = document.getElementById('searchInput').value.toLowerCase();
                const selectedCategory = document.getElementById('categoryFilter').value;
                const rows = Array.from(document.querySelectorAll('#productTbody tr'));

                // Filter rows
                const filteredRows = rows.filter(row => {
                    const name = row.cells[1].textContent.toLowerCase();
                    const brand = row.cells[4].textContent.toLowerCase();
                    const code = row.cells[7].textContent.toLowerCase();
                    const category = row.getAttribute('data-category');
                    const matchText = name.includes(searchInput) || brand.includes(searchInput) || code.includes(searchInput);
                    const matchCategory = selectedCategory === 'all' || category === selectedCategory;
                    return matchText && matchCategory;
                });

                // Hide all rows first
                rows.forEach(row => row.style.display = 'none');

                if (filteredRows.length === 0) {
                    // Show "No items found"
                    if (!document.getElementById('noItemFound')) {
                        const tr = document.createElement('tr');
                        tr.id = 'noItemFound';
                        tr.innerHTML = `<td colspan="9" class="text-center py-4">No products found.</td>`;
                        document.getElementById('productTbody').appendChild(tr);
                    }
                } else {
                    const noItemRow = document.getElementById('noItemFound');
                    if (noItemRow) noItemRow.remove();

                    paginateRows(filteredRows);
                }
            }

            function paginateRows(filteredRows) {
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                if (currentPage > totalPages) currentPage = 1;

                filteredRows.forEach((row, index) => {
                    row.style.display = (index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage) ? '' : 'none';
                });

                const paginationEl = document.getElementById('pagination');
                paginationEl.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const btn = document.createElement('button');
                    btn.textContent = i;
                    btn.classList.toggle('active', i === currentPage);
                    btn.onclick = () => {
                        currentPage = i;
                        paginateRows(filteredRows);
                    };
                    paginationEl.appendChild(btn);
                }
            }

            async function deleteProduct(id, productName) {
                Swal.fire({
                    title: "Are you sure?",
                    text: `${productName} will be permanently deleted.`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/admin/products/delete/${id}`, { method: 'DELETE' })
                            .then(res => res.json())
                            .then(data => {
                                Swal.fire("Deleted!", `${productName} has been deleted.`, "success")
                                    .then(() => location.reload());
                            })
                            .catch(err => console.error(err));
                    }
                });
            }

            async function editProduct(userID) {
                try {
                    window.location.href = `/admin/users/${userID}/edit`;
                } catch (error) {
                    console.error(error);
                    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                }
            }

            // Initialize
            applyFilters();
        </script>
